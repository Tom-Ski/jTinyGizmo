buildscript {
    repositories {
        google()
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
    dependencies {
        classpath "com.badlogicgames.gdx:gdx-jnigen-gradle:2.3.1"
    }
}


ext {
    gdxVersion = '1.10.1-SNAPSHOT'

    isReleaseBuild = {
        return project.hasProperty("RELEASE")
    }

    getReleaseRepositoryUrl = {
        return project.hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
                : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
    }

    getSnapshotRepositoryUrl = {
        return project.hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
                : "https://s01.oss.sonatype.org/content/repositories/snapshots/"
    }

    getRepositoryUsername = {
        return project.hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
    }

    getRepositoryPassword = {
        return project.hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
    }
}

allprojects {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }

    version project.getProperty('version') + (isReleaseBuild() ? "" : "-SNAPSHOT")
}


project("gizmo") {

    apply plugin: 'java-library'
    apply plugin: 'com.badlogicgames.gdx.gdx-jnigen'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        api "com.badlogicgames.gdx:gdx-jnigen-loader:2.3.1"
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Test) {
        systemProperty 'file.encoding', 'UTF-8'
    }

    javadoc {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    task packageSources(type: Jar, dependsOn: [classes, jar]) {
        from sourceSets.main.resources.srcDirs
    }

    artifacts {
        api(jar, packageSources)
    }

    jnigen {
        sharedLibName = "jtinygizmo"
        
        add(Windows, x32) {
//            compilerSuffix = ".exe"
        }
        add(Windows, x64) {
//            compilerSuffix = ".exe"
        }
        add(Linux, x64)
        add(Linux, x32, ARM)
        add(Linux, x64, ARM)
        add(MacOsX, x64) {
             cppFlags += " -std=c++11"
        }
         add(MacOsX, x64, ARM) {
              cppFlags += " -std=c++11 -c"
         }
    }

    apply from: rootProject.file('publish.gradle')
}

project("test") {
    apply plugin: 'java-library'


    sourceSets.main.resources.srcDirs = ["assets"]

    dependencies {

        api project(":gizmo")
        api fileTree(dir: '../gizmo/build/libs', include: '*.jar')

        api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        api "com.talosvfx:talos-libgdx:2.0.0-SNAPSHOT"
    }


    task dist(type: Jar) {
        dependsOn configurations.runtimeClasspath
        from {
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
        with jar

        manifest {
            attributes 'Main-Class': 'com.asidik.tinygizmo.LwjglTest'
        }

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        archiveBaseName = "desktop"
    }

    dist.dependsOn classes


}

