name: Build Workflow

on: [ push, pull_request ]

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Install cross-compilation toolchains
        run: |
          sudo apt update
          sudo apt install -y --force-yes gcc g++
          sudo apt install -y --force-yes gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
          sudo apt install -y --force-yes gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross
          sudo apt install -y --force-yes gcc-riscv64-linux-gnu g++-riscv64-linux-gnu libc6-dev-riscv64-cross
          sudo apt install -y --force-yes mingw-w64 lib32z1

      - name: Download Android NDK
        run: |
          mkdir -p $HOME/android-ndk
          cd $HOME/android-ndk
          wget https://dl.google.com/android/repository/android-ndk-r25c-linux.zip -O android-ndk.zip
          echo "769ee342ea75f80619d985c2da990c48b3d8eaf45f48783a2d48870d04b46108  android-ndk.zip" | sha256sum --check
          unzip android-ndk.zip
          echo "NDK_HOME=$HOME/android-ndk/android-ndk-r25c" >> $GITHUB_ENV

      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'


      - name: Initialize jnigen
        run: ./gradlew jnigen
      - name: Build natives
        run: ./gradlew jnigenBuildAllWindows jnigenBuildAllLinux


      - name: Pack artifacts
        run: |
          find .  -name "*.a" -o -name "*.dll" -o -name "*.dylib" -o -name "*.so" | grep "libs" > native-files-list
          zip natives-linux -@ < native-files-list

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: natives-linux.zip
          path: natives-linux.zip
  build-mac:
    runs-on: macos-latest
    steps:
      - name: Setup Xcode SDK
        run: |
          # See https://github.com/actions/virtual-environments/issues/2557
          sudo mv /Library/Developer/CommandLineTools/SDKs/* /tmp
          sudo xcode-select -switch /Applications/Xcode.app
          /usr/bin/xcodebuild -version

      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'


      - name: Initialize jnigen
        run: ./gradlew jnigen
      - name: Build natives
        run: ./gradlew jnigenBuildAllMacOsX

      - name: Pack artifacts
        run: |
          find .  -name "*.a" -o -name "*.dll" -o -name "*.dylib" -o -name "*.so" -o -name "*.xcframework" | grep "libs" > native-files-list
          zip natives-mac -@ < native-files-list

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: natives-mac.zip
          path: natives-mac.zip


  package:
    runs-on: ubuntu-latest
    env:
      ORG_GRADLE_PROJECT_GITHUB_USERNAME: ${{ github.actor }}
      ORG_GRADLE_PROJECT_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ORG_GRADLE_PROJECT_NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      ORG_GRADLE_PROJECT_NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      NDK_HOME: /usr/local/lib/android/sdk/ndk-bundle
    needs: [ build-linux, build-mac ]
    steps:
      - uses: actions/checkout@v4

      - name: Download Artifacts from linux
        if: success() && needs.build-linux.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: natives-linux.zip

      - name: Unzip artifacts
        run: unzip -o natives-linux.zip
      - name: Download Artifacts from mac
        if: success() && needs.build-mac.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: natives-mac.zip

      - name: Unzip artifacts
        run: unzip -o natives-mac.zip


      - name: Package All
        run: ./gradlew jnigenPackageAll

      - name: Publish to maven
        if: ${{ github.event_name == 'push' }}
        run: ./gradlew publish
